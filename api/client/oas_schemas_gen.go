// Code generated by ogen, DO NOT EDIT.

package client

import (
	"fmt"
	"net/url"

	"github.com/go-faster/jx"
)

func (s *ErrorModelStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/ErrorDetail
type ErrorDetail struct {
	// Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'.
	Location OptString `json:"location"`
	// Error message text.
	Message OptString `json:"message"`
	// The value at the given location.
	Value jx.Raw `json:"value"`
}

// GetLocation returns the value of Location.
func (s *ErrorDetail) GetLocation() OptString {
	return s.Location
}

// GetMessage returns the value of Message.
func (s *ErrorDetail) GetMessage() OptString {
	return s.Message
}

// GetValue returns the value of Value.
func (s *ErrorDetail) GetValue() jx.Raw {
	return s.Value
}

// SetLocation sets the value of Location.
func (s *ErrorDetail) SetLocation(val OptString) {
	s.Location = val
}

// SetMessage sets the value of Message.
func (s *ErrorDetail) SetMessage(val OptString) {
	s.Message = val
}

// SetValue sets the value of Value.
func (s *ErrorDetail) SetValue(val jx.Raw) {
	s.Value = val
}

// Ref: #/components/schemas/ErrorModel
type ErrorModel struct {
	// A URL to the JSON Schema for this object.
	Schema OptURI `json:"$schema"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail OptString `json:"detail"`
	// Optional list of individual error details.
	Errors OptNilErrorDetailArray `json:"errors"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance OptURI `json:"instance"`
	// HTTP status code.
	Status OptInt64 `json:"status"`
	// A short, human-readable summary of the problem type. This value should not change between
	// occurrences of the error.
	Title OptString `json:"title"`
	// A URI reference to human-readable documentation for the error.
	Type OptURI `json:"type"`
}

// GetSchema returns the value of Schema.
func (s *ErrorModel) GetSchema() OptURI {
	return s.Schema
}

// GetDetail returns the value of Detail.
func (s *ErrorModel) GetDetail() OptString {
	return s.Detail
}

// GetErrors returns the value of Errors.
func (s *ErrorModel) GetErrors() OptNilErrorDetailArray {
	return s.Errors
}

// GetInstance returns the value of Instance.
func (s *ErrorModel) GetInstance() OptURI {
	return s.Instance
}

// GetStatus returns the value of Status.
func (s *ErrorModel) GetStatus() OptInt64 {
	return s.Status
}

// GetTitle returns the value of Title.
func (s *ErrorModel) GetTitle() OptString {
	return s.Title
}

// GetType returns the value of Type.
func (s *ErrorModel) GetType() OptURI {
	return s.Type
}

// SetSchema sets the value of Schema.
func (s *ErrorModel) SetSchema(val OptURI) {
	s.Schema = val
}

// SetDetail sets the value of Detail.
func (s *ErrorModel) SetDetail(val OptString) {
	s.Detail = val
}

// SetErrors sets the value of Errors.
func (s *ErrorModel) SetErrors(val OptNilErrorDetailArray) {
	s.Errors = val
}

// SetInstance sets the value of Instance.
func (s *ErrorModel) SetInstance(val OptURI) {
	s.Instance = val
}

// SetStatus sets the value of Status.
func (s *ErrorModel) SetStatus(val OptInt64) {
	s.Status = val
}

// SetTitle sets the value of Title.
func (s *ErrorModel) SetTitle(val OptString) {
	s.Title = val
}

// SetType sets the value of Type.
func (s *ErrorModel) SetType(val OptURI) {
	s.Type = val
}

// ErrorModelStatusCode wraps ErrorModel with StatusCode.
type ErrorModelStatusCode struct {
	StatusCode int
	Response   ErrorModel
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorModelStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorModelStatusCode) GetResponse() ErrorModel {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorModelStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorModelStatusCode) SetResponse(val ErrorModel) {
	s.Response = val
}

// HeadFilesByFileNoContent is response for HeadFilesByFile operation.
type HeadFilesByFileNoContent struct {
	AcceptRanges  OptString
	ContentLength OptString
	LastModified  OptString
}

// GetAcceptRanges returns the value of AcceptRanges.
func (s *HeadFilesByFileNoContent) GetAcceptRanges() OptString {
	return s.AcceptRanges
}

// GetContentLength returns the value of ContentLength.
func (s *HeadFilesByFileNoContent) GetContentLength() OptString {
	return s.ContentLength
}

// GetLastModified returns the value of LastModified.
func (s *HeadFilesByFileNoContent) GetLastModified() OptString {
	return s.LastModified
}

// SetAcceptRanges sets the value of AcceptRanges.
func (s *HeadFilesByFileNoContent) SetAcceptRanges(val OptString) {
	s.AcceptRanges = val
}

// SetContentLength sets the value of ContentLength.
func (s *HeadFilesByFileNoContent) SetContentLength(val OptString) {
	s.ContentLength = val
}

// SetLastModified sets the value of LastModified.
func (s *HeadFilesByFileNoContent) SetLastModified(val OptString) {
	s.LastModified = val
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilErrorDetailArray returns new OptNilErrorDetailArray with value set to v.
func NewOptNilErrorDetailArray(v []ErrorDetail) OptNilErrorDetailArray {
	return OptNilErrorDetailArray{
		Value: v,
		Set:   true,
	}
}

// OptNilErrorDetailArray is optional nullable []ErrorDetail.
type OptNilErrorDetailArray struct {
	Value []ErrorDetail
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilErrorDetailArray was set.
func (o OptNilErrorDetailArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilErrorDetailArray) Reset() {
	var v []ErrorDetail
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilErrorDetailArray) SetTo(v []ErrorDetail) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilErrorDetailArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilErrorDetailArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ErrorDetail
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilErrorDetailArray) Get() (v []ErrorDetail, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilErrorDetailArray) Or(d []ErrorDetail) []ErrorDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
